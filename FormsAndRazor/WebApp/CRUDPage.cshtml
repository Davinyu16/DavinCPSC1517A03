@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "CRUD - Insert");

    //global necessary variables
    var productid = "";
    var productname = "0";
    var supplierid = "0";
    var categoryid = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var thebutton = "";

    //obtain two lists: SupplierList and CategoryList
    var db = Database.Open("NWDB");
    var supplierquery = @"SELECT SupplierID, CompanyName
FROM Suppliers
Order by CompanyName";
    var categoryquery = @"SELECT CategoryID, CategoryName
FROM Categories
Order by CategoryName";
    var supplierlist = db.Query(supplierquery);
    var categorylist = db.Query(categoryquery);

    Validation.Add("ProductName",
        Validator.Required("Product Name is required"),
        Validator.StringLength(160, 1, "Product name is limited to 160 characters")
        );
    //a nullable string has zero (0) minimum characters
    Validation.Add("QuantityPerUnit",
        Validator.StringLength(40, 0, "Product name is limited to 160 characters"));
    Validation.Add("UnitPrice",
        Validator.Range(0.0, double.MaxValue, "Unit Price needs to be 0.00 or more"));
    Validation.Add("UnitsInStock",
        Validator.Integer("Units in stock must be a whole number"),
        Validator.Range(0.0, 32767.0, "Units in stock needs to be 0 to 32767."));
    Validation.Add("UnitsOnOrder",
        Validator.Integer("Units on order must be a whole number"),
        Validator.Range(0.0, 32767.0, "Units on order needs to be 0 to 32767."));
    Validation.Add("ReorderLevel",
        Validator.Integer("Reorder level must be a whole number"),
        Validator.Range(0.0, 32767.0, "Reorder level needs to be 0 to 32767."));

    //Sample of using .EqualTo()
    //Validation.Add("Password",
    //  Validator.EqualTo("ConfirmPassword", "Password invalid confirmation"));

    //sample of matching patterns using .Regex()
    //Validation.Add("PostalCode",
    //  Validator.Regex(@"^[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]$", "Postal Code is invalid format"));
}

@section banner{
    <h1>Database: CRUD Product - Insert</h1>
}

@if (IsPost)
        {
            //when you have multiple buttons, a good practice is to determine
            //    what action to do for the press button FIRST!
            thebutton = Request.Form["formButton"];
            productname = Request.Form["ProductName"];
            quantityperunit = Request.Form["QuantityPerUnit"];
            supplierid = Request.Form["SupplierList"];
            categoryid = Request.Form["CategoryList"];
            unitprice = Request.Form["UnitPrice"];
            unitsinstock = Request.Form["UnitsInStock"];
            unitsonorder = Request.Form["UnitsOnOrder"];
            reorderlevel = Request.Form["ReorderLevel"];

            if (thebutton.Equals("Clear"))
            {
                productid = "";
                productname = "";
                supplierid = "";
                categoryid = "";
                quantityperunit = "";
                unitprice = "";
                unitsinstock = "";
                unitsonorder = "";
                reorderlevel = "";
                thebutton = "";
            }
            else
            {
                //validate data
                //Your validation controls will NOT EXECUTE unless you request their
                //  execution. Use the Validation.IsValid() method
                //You DO NOT need to put in any other messages for invalid data discovered
                //  by the execution of your Validation controls
                //This validation is server side validation, where HTML5 validation is client side.
                if (Validation.IsValid())
                {

                    //other Validation
                    //What if you need some validation that cannot be done either by
                    // HTML5 or Validation Controls
                    //This type of validation is logical validation

                    //assume for this sample that the category is required
                    //the category list has a prompt line, the value for the prompt
                    //  is not acceptable to the database
                    //a category MUST be selected
                    var valid = true;
                    if (categoryid.Equals("0"))
                    {
                        valid = false;
                        <div class="col-12 text-center">
                            <p style="color:firebrick">You must select a category</p>
                        </div>
            }
            if (valid)
            {
                //data good
                try
                {
                    //connect to database (done above)
                    //create insert command
                    var inscommand = @"INSERT INTO Products (ProductName, SupplierID, CategoryID,
                                            QuantityPerUnit, UnitPrice, UnitsInStock,
                                            UnitsOnOrder, ReorderLevel, Discontinued)
                                            VALUES(@0, @1, @2, @3, @4, @5, @6, @7, 0)";
                    //execute the command
                    productid = db.Execute(inscommand, productname,
                    string.IsNullOrEmpty(supplierid) ? null : supplierid,
                    string.IsNullOrEmpty(categoryid) ? null : categoryid,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? null : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel).ToString();
                        <div class="col-12 text-center">
                            <p style="color:lightseagreen">Product has been added.</p>
                        </div>
                }
                catch (Exception ex)
                {
                        <div class="col-12 text-center">
                            <p style="color:firebrick">Error in processing: @ex.Message</p>
                        </div>
                }
            }
        }
    }
}
else
{

}

@* you can display error messages in a summary group
    the default display is a bulleted list
    all associated messages for validations are displayed*@
@Html.ValidationSummary()

<form id="theform" method="post">
    <div class="row">
        <div class="col-md-6 text-right">
            <label for="ProductID">ID</label><br />
            <label for="ProductName">Name:</label><br />
            <label for="SupplierID">Supplier:</label><br />
            <label for="CategoryID">Catgeory:</label><br />
            <label for="QuantityPerUnit">Qty/Unit:</label><br />
            <label for="UnitPrice">Price:</label><br />
            <label for="UnitsInStock">QoH:</label><br />
            <label for="UnitsOnOrder">QoO:</label><br />
            <label for="ReorderLevel">RoL:</label><br />
            <br />
        </div>
        <div class="col-me-6 text-left">

            <input type="text" id="ProductName" name="ProductName" value="@productname" />
            @*OR
                you can place your error message directly beside the control that is in error*@
            @Html.ValidationMessage("ProductName")
            <br />

            <select id="SupplierList" name="SupplierList">
                <option value="0">select supplier...</option>
                @foreach (var item in supplierlist)
                {
                    //by default the 1st option is the selected item when
                    //  the control is created
                    //to retain the selected value, you need to have an option
                    //  item that has its atribbute selected within the option tag
                    if (supplierid == item.SupplierID.ToString())
                    {
                        //this was the last selected ddl item
                        <option value="@item.SupplierID" selected>@item.CompanyName</option>
                    }
                    else
                    {
                        <option value="@item.SupplierID">@item.CompanyName</option>
                    }

                }
            </select>
            <br />
            <select id="CategoryList" name="CategoryList" value="@categorylist">
                <option value="0">select category...</option>
                @foreach (var item in categorylist)
                {
                    <option value="@item.CategoryID">@item.CategoryName</option>
                }
            </select>
            <br />
            <input type="text" id="QuantityPerUnit" name="QuantityPerUnit" value="@quantityperunit" /><br />
            <input type="text" id="UnitPrice" name="UnitPrice" value="@unitprice" /><br />
            <input type="text" id="UnitsInStock" name="UnitsInStock" value="@unitsinstock" /><br />
            <input type="text" id="UnitsOnOrder" name="UnitsOnOrder" value="@unitsonorder" /><br />
            <input type="text" id="ReorderLevel" name="ReorderLevel" value="@reorderlevel" /><br />
            <br />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-center">
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn btn-primary" value="Add" />
            <input type="submit" id="FormButton" name="FormButton"
                   class="btn" value="Clear" />
        </div>
    </div>
</form>
